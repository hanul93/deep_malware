# -*-coding:utf-8 -*-

"""
Copyright (C) 2011-2015 Nurilab.

Author: Kei Choi(hanul93@gmail.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2 as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
"""

__revision__ = '$LastChangedRevision: 1 $'
__author__   = 'Kei Choi'
__version__  = '1.0.0.%d' % int( __revision__[21:-2] )
__contact__  = 'hanul93@gmail.com'

import traceback
import os
import re
import logging
import logging.handlers
import time

#-----------------------------------------------------------
# 싱글톤 클래스
# works in Python 2 & 3
#-----------------------------------------------------------
class _Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)
            cls._instances[cls].init()
        return cls._instances[cls]

class Singleton(_Singleton('SingletonMeta', (object,), {})): pass

#-----------------------------------------------------------
# 로그 출력 클래스
# 싱글톤 패턴 사용으로 여러번 호출해도 한번만 수행
#-----------------------------------------------------------
class NLogger(Singleton):
    #-------------------------------------------------------
    # 로그 출력 초기화 (싱글톤 초기화) : 자동 호출됨
    #-------------------------------------------------------
    def init(self) :
        # 로거 인스턴스를 만든다
        logger = logging.getLogger('mylogger')

        # 포매터를 만든다
        fomatter = logging.Formatter('[%(levelname)s] %(asctime)s > %(message)s')

        # 스트림과 파일로 로그를 출력하는 핸들러를 각각 만든다.
        now = time.localtime()
        self.logpath = os.path.abspath('log')

        # 폴더가 없으면 생성
        if not os.path.isdir(self.logpath):
            os.mkdir(self.logpath)

        fname = self.logpath + os.sep  + '%04d%02d%02d.log' % (now.tm_year, now.tm_mon, now.tm_mday)

        fileHandler = logging.FileHandler(fname)
        #streamHandler = logging.StreamHandler()

        # 각 핸들러에 포매터를 지정한다.
        fileHandler.setFormatter(fomatter)
        #streamHandler.setFormatter(fomatter)

        # 로거 인스턴스에 스트림 핸들러와 파일핸들러를 붙인다.
        logger.addHandler(fileHandler)
        #logger.addHandler(streamHandler)

        # 로거 인스턴스로 로그를 찍는다.
        logger.setLevel(logging.DEBUG)

        self.logger = logger

    #-------------------------------------------------------
    # 오류 출력에 사용 (trackback용)
    #-------------------------------------------------------
    def Traceback(self):
        lines = traceback.format_exc().strip().split('\n')
        rl = [lines[-1]] # 실제 오류 메시지

        # Call 스택 가공
        # 실제 오류 메시지 : File "C:\Project\MFAEngine2\NuriLib_tsk\pylog\pylog.py", line 42, in <module>
        #                  :   fp = open('abc', 'rb')
        # 가공 오류 메시지 : ^    pylog [40] : fp = open('abc', 'rb')
        lines = lines[1:-1]
        lines.reverse()
        nstr = ''
        for i in range(len(lines)):
            line = lines[i].strip()
            if line.startswith('File "'):
                eles = lines[i].strip().split('"')

                basename = os.path.basename(eles[1])
                eles[1] = '%s' % (basename.split('.')[0])

                s = '[0-9]+'
                t = re.search(s, eles[2])
                if t : eles[2] = '%s' % t.group()
                else : eles[2] = ''

                rl.append('^    %s [%s] : %s' % (eles[1], eles[2], nstr))
                nstr = ''
            else:
                nstr += line

        for msg in rl :
            self.logger.error(msg)

    #-------------------------------------------------------
    # 오류 출력에 사용
    #-------------------------------------------------------
    def PrintError(self, msg) :
        # 메세지 출력
        self.logger.error(msg)

    #-------------------------------------------------------
    # 정상 로그 출력에 사용
    #-------------------------------------------------------
    def PrintInfo(self, msg) :
        # 메세지 출력
        self.logger.info(msg)

#-----------------------------------------------------------
# TEST
#-----------------------------------------------------------
if __name__ == '__main__' :
    l = NLogger()

    def d():
        return 1/0
    def c():
        return d()
    def b():
        return c()
    def a():
        return b()

    try :
        l.PrintInfo('Test Start') # 일반 로그 출력
        l.PrintError('에러 테스트')
        a() # Call 스택 출력 테스트
    except :
        l.Traceback()
