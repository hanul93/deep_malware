# -*- coding:utf-8 -*-
# Author: Kei Choi(hanul93@gmail.com)

import os
import hashlib
import shutil
import time
import sqlite3
import base64

import nlog
import ai_av_scan


from flask import Flask, jsonify
from flask import abort
from flask import Flask, request, redirect, url_for
from werkzeug import secure_filename


K2AI_WEB_PATH = '/k2ai/api/v1'
UPLOAD_FOLDER = 'temp'  # 임시 업로드 경로
SAVE_FOLDER = 'repository'

app = Flask(__name__)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 20024  # 최대 200MB

l = nlog.NLogger()

k2ai = ai_av_scan.K2AI()
# print ' * Start K2AI'
l.PrintInfo('== Start K2AI ==')  # 일반 로그 출력

# -------------------------------------------------------------------------
# 오류 처리
# -------------------------------------------------------------------------
K2AI_ERROR_SUCCESS = 0
K2AI_ERROR_PARAMETER = -1
K2AI_ERROR_AUTHORITY = -2
K2AI_ERROR_API_KEY = -11
K2AI_ERROR_API_KEY_EXPIRE = -12
K2AI_ERROR_API_KEY_OVER_DAILY = -13
K2AI_ERROR_API_KEY_OVER_HOURLY = -14
K2AI_ERROR_HASH = -31
K2AI_ERROR_NO_RESULT = -404
K2AI_ERROR_SYSTEM = -500


def set_result(ret_no):
    ret_dict = {}

    result_message = {
        K2AI_ERROR_SUCCESS: 'Success request',  # 성공
        K2AI_ERROR_PARAMETER: 'Invalid Parameters or request form',  # 파라미터가 잘못 되었음
        K2AI_ERROR_AUTHORITY: 'No authority to use',  # 사용 권한 없음
        K2AI_ERROR_API_KEY: 'No matching data to API Key: API Key',  # API Key 오류
        K2AI_ERROR_API_KEY_EXPIRE: 'Expired API Key',  # API Key 만료
        K2AI_ERROR_API_KEY_OVER_DAILY: 'Over the daily request limit',  # 일일 요청 한도 초과
        K2AI_ERROR_API_KEY_OVER_HOURLY: 'Over the hourly request limit',  # 시간당 요청 한도 초과
        # -15: 'Over the minute request limit',  # 분당 요청 한도 초과
        K2AI_ERROR_HASH: 'Invalid type of hash',  # Hash 형식이 잘못 되었음
        K2AI_ERROR_NO_RESULT: 'No result',  # 결과 없음 (5분 후 재시도)
        K2AI_ERROR_SYSTEM: 'Internal Server Error'  # 시스템 오류
    }

    if ret_no in result_message:
        msg = result_message[ret_no]
        ret_dict['result_code'] = ret_no
        ret_dict['result_msg'] = msg

    return ret_dict


# -------------------------------------------------------------------------
# Malware Scan (AI)
# -------------------------------------------------------------------------
@app.route(K2AI_WEB_PATH + '/file/scan', methods=['GET', 'POST'])
def scan_file():
    ret = {}
    feature = None

    if request.method == 'POST':
        if 'context' in request.form:
            context = request.form['context']  # Base64 File Feature
            feature = base64.b64decode(context)

            m_id, m_score = k2ai.scan(feature)

            ret['Malware ID'] = m_id
            ret['Malware Score'] = m_score
            ret.update(set_result(K2AI_ERROR_SUCCESS))  # 성공
            return jsonify(ret)
        else:
            return jsonify(set_result(K2AI_ERROR_PARAMETER))
    else:
        return jsonify(set_result(K2AI_ERROR_AUTHORITY))


# -------------------------------------------------------------------------
# 서버 Main
# -------------------------------------------------------------------------
if __name__ == '__main__':
    # app.run(debug=True)
    app.run(host='0.0.0.0', port=8080)
